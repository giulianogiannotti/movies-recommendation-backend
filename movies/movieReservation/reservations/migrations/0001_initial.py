# Generated by Django 5.2.5 on 2025-08-18 21:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Auditorium',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the auditorium.', max_length=100)),
                ('capacity', models.PositiveIntegerField(help_text='The seating capacity of the auditorium.')),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the movie.', max_length=100)),
                ('duration', models.PositiveIntegerField(help_text='The duration of the movie in minutes.')),
                ('description', models.TextField(blank=True, help_text='A brief description of the movie.')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('regular', 'Regular')], default='regular', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Function',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the function.', max_length=100)),
                ('date_time', models.DateTimeField(help_text='The date and time when the function takes place.')),
                ('auditorium', models.ForeignKey(help_text='The auditorium where the function is held.', on_delete=django.db.models.deletion.CASCADE, related_name='functions', to='reservations.auditorium')),
                ('movie', models.ForeignKey(help_text='The movie being shown in the function.', on_delete=django.db.models.deletion.CASCADE, related_name='functions', to='reservations.movie')),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movie_name', models.CharField(help_text='The name of the movie reserved.', max_length=100)),
                ('reservation_date', models.DateTimeField(auto_now_add=True, help_text='The date and time when the reservation was made.')),
                ('function', models.ForeignKey(help_text='The function associated with the reservation.', on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='reservations.function')),
                ('user', models.ForeignKey(help_text='The user who made the reservation.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_number', models.CharField(help_text='The unique identifier for the seat.', max_length=10, unique=True)),
                ('is_reserved', models.BooleanField(default=False, help_text='Indicates whether the seat is reserved or not.')),
                ('auditorium', models.ForeignKey(help_text='The auditorium where the seat is located.', on_delete=django.db.models.deletion.CASCADE, related_name='seats', to='reservations.auditorium')),
            ],
        ),
        migrations.CreateModel(
            name='ReservationSeat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function', models.ForeignKey(help_text='The function during which the seat is reserved.', on_delete=django.db.models.deletion.CASCADE, related_name='reservation_seats', to='reservations.function')),
                ('reservation', models.ForeignKey(help_text='The reservation associated with the seat.', on_delete=django.db.models.deletion.CASCADE, related_name='reservation_seats', to='reservations.reservation')),
                ('seat', models.ForeignKey(help_text='The seat that is reserved.', on_delete=django.db.models.deletion.CASCADE, related_name='reservation_seats', to='reservations.seat')),
            ],
        ),
    ]
